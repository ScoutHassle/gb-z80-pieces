INCLUDE "../core/hardware.inc"
INCLUDE "../core/memory.z80"
INCLUDE "../core/display.z80"

SECTION "Header", ROM0[$100]

EntryPoint: ; Execution begins
    ;di ; Disable interrupts.
    nop
    jp main ;

REPT $150 - $104
    db 0
endr

SECTION "Game code", rom0

INCLUDE "assets/cloud.inc"
INCLUDE "assets/cloudsmap.inc"

main:
    ; main loop
    call waitVBlank

    ; LCD off.
    xor a ; AKA ld a, 0
    ld [rLCDC], a

	call loadTileLabel
	call initdisplay

.main_loop:
    call waitVBlank
    call updateInput

    jr .main_loop

; Input section

updateInput::
    ld hl, $FF00 ; Input bits
    ld a, $20 ; Check for arrows. NOTE: $10 would check buttons.
    ld [hl], a ; So now we have the input...

.playerRightInput:
    bit $0, [hl] ; check right input
    jr nz, .playerLeftInput
.scrollRight:
	ld hl, XPos
	ld a, [hl]
	ld b, 1
	adc a, b
	ld [hl], a
	ld [rSCX], a
    jr .endInput

.playerLeftInput:
    bit $01, [hl]
    jr nz, .endInput
.scrollLeft:
	ld hl, XPos
	ld a, [hl]
	ld b, 1
	sbc a, b
	ld [hl], a
	ld [rSCX], a

.endInput:
    ; Reset input
    ld hl, $FF00
    ld [hl], $FF
ret

initdisplay:
   ; Init display registers
    ld a, %11100100 ; Load Palette data
    ld [rBGP], a

    xor a
    ld [rSCY], a
    ld [rSCX], a

    ; Shut downthe sound
    ld [rNR52], a

    ; And turn the screen back on
    ld a, %10000001
    ld [rLCDC], a
	ret

; memory locs
; $8000-$87FF sprite
; $8800-$8FFF shared
; $9000  BG tiles
loadTileLabel:
	ld de, $9000 ; Writing to... But why? What are those first 10 bytes doing?!
	ld hl, CloudTile
	ld bc, 16
	call memcpy


    ld de, $9800
    ld hl, CloudMap ; Currently supports 32 iterations.
    ld bc, 1024
    call memcpy
    ret

SECTION "player_vars", WRAM0
XPos:: DS 1