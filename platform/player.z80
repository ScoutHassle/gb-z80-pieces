SECTION "PLAYER", rom0

playerStartX EQU 16
playerStartY EQU 128

playerMinX EQU 8
playerMaxX EQU 160

playerMinY EQU 16
playerMaxY EQU 128

playerMoveSpeed EQU 1
playerJumpSpeed EQU 8
gravity EQU 1

initPlayer::
    ; Reset player vars.
    ld hl, playerX
    ld [hl], playerStartX
    ld hl, playerY
    ld [hl], playerStartY

    ld hl, playerGrounded
    ld [hl], $01
    ld hl, playerVelocityY
    ld [hl], $00
        
    ; Set 0 frame
    ld hl, currFrame
    ld a, $00
    ld [hl], a

.loadPlayerSprite::
    ; Load sprite into memory.
    ld hl, Blob
	ld de, $8000
	ld bc, 48
	call memcpy

    ; Sprite Memory Layout. 4 bytes per sprite.
    ; 0 - Y / 1 - X / 2 - TileNumber / 3 - Attributes

    ; Set sprite attribute data.
    ld hl, $FE00
    ld [hl], playerStartY ; Y

    inc l
    ld [hl], playerStartX ; X

    inc l
    ld [hl], $00 ; TileNumber
    inc l
    ld a, %0001000
    ld [hl], a ; Attributes
ret

updatePlayer::
; Does the following in the following order...
; Input
; Position
; Animation

; OPTIMISATION TO MAKE UP/LEFT AND DOWN/RIGHT SHARE CODE.
.updateInput::
    ld hl, $FF00 ; Input bits
    ld a, %11101111 ; Check for arrows. NOTE: $10 would check buttons.
    ld [hl], a ; So now we have the input...
    ld a, [hl]

.playerRightInput:
    bit $0, [hl] ; check right input
    jr nz, .playerLeftInput
    ; Move right
	ld hl, playerX
	ld a, [hl]
	adc a, playerMoveSpeed
    ld b, a
    sub playerMaxX ; if a>=160
    jp c, .setX ; goto else
    ld b, playerMaxX
    jp .setX

.playerLeftInput:
    bit $01, [hl]
    jr nz, .handleButtonInputs
    ; Move left
	ld hl, playerX
	ld a, [hl]
	sbc a, playerMoveSpeed
    ld b, a
    sub playerMinX ; if a < 8
    jp nc, .setX
    ld b, playerMinX

.setX:
    ; Set playerX - currently in hl
    ld [hl], b ; set new b

; reset
.handleButtonInputs:
    ld hl, $FF00 ; Input bits
    ld a, %11011111 ; Check for arrows. NOTE: $10 would check buttons.
    ld [hl], a ; So now we have the input...
    bit $05, [hl]
    jr nz, .endInput

.handleJumpButton:   
    bit $00, [hl]  ; A
    jr nz, .endInput
    ld hl, playerGrounded
    ld a, [hl]
    cp 1
    jr nz, .endInput

    ld [hl], $00
    ld hl, playerVelocityY
    ld [hl], playerJumpSpeed

.endInput:
    ; Reset.
    ld hl, $FF00
    ld [hl], $FF

.updatePlayerPosition:
    ; X is easy
    ld hl, playerX
    ld a, [hl]
    ld hl, $FE01
    ld [hl], a ; X

.updatePlayerY:
    ; bit more advanced
    ld hl, playerGrounded
    ld a, [hl]
    cp 0
    jr nz, .updatePlayerAnimation ; next

    ; decrease velocity by gravity
    ld hl, playerVelocityY
    ld a, [hl]
    sub a, gravity
    ld [hl], a
    ld b, a

    ; Now work out if we move are we in the limits?
    ld hl, playerY
    ld a, [hl]   
    sbc a, b
    ld b, a ; shove that in b for a minute.
    sub playerMaxY ; if a>=160
    jp c, .setY ; still falling

    ; Alright hit our limit, kill velocity, ground the player
    ld hl, playerVelocityY
    ld [hl], 0
    ld hl, playerGrounded
    ld [hl], 1

    ; Move playerY back
    ld hl, playerY
    ld b, playerMaxY ; set limit

.setY:
    ld [hl], b ; set playerY

.updateSpriteY:
    ; Update sprite.
    ld hl, playerY
    ld a, [hl]
    ld hl, $FE00
    ld [hl], a ; Y

.updatePlayerAnimation::
    ld hl, currFrame
    inc [hl] ; next frame
	ld a, [hl]
    cp 33
    jr nz, .continue
    ld a, $00
    ld [hl], a ; reset to first frame
.continue:
    ld hl, frames
    ld l, a ; Select frame e.g. frame[a]
    ld a, [hl] ; load tile number into a
    ld hl, $FE02
    ld [hl], a
ret


SECTION "player_vars", WRAM0
currFrame:: DS 1
playerX:: DS 1
playerY:: DS 1
playerIO:: DS 1

playerGrounded:: DS 1
playerVelocityY:: DS 1

SECTION "frames", ROMX[$5D00]
frames:
    DB $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $01, $01, $01, $01, $01
